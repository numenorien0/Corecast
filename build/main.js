const{app:app,BrowserWindow:BrowserWindow,Menu:Menu,ipcMain:ipcMain,dialog:dialog,desktopCapturer:desktopCapturer,session:session,globalShortcut:globalShortcut}=require("electron"),{Worker:Worker}=require("worker_threads"),path=require("path"),remoteMain=require("@electron/remote/main"),{autoUpdater:autoUpdater}=require("electron-updater"),log=require("electron-log");log.transports.file.level="info",autoUpdater.logger=log,remoteMain.initialize();const configManager=require("./preferences"),userConfig=configManager.loadUserConfig()||configManager.defaultConfig,{en:en,fr:fr}=require("./localization"),lang=userConfig.general&&"fr"===userConfig.general.language?fr:en;let mainWindow;app.commandLine.appendSwitch("disable-background-timer-throttling"),app.commandLine.appendSwitch("disable-renderer-backgrounding"),app.commandLine.appendSwitch("--disable-audio-output-resampler"),app.commandLine.appendSwitch("enable-experimental-web-platform-features");let openAtStartupFile=null;app.on("open-file",((e,n)=>{e.preventDefault(),mainWindow?mainWindow.webContents.send("open-filePath",n):openAtStartupFile=n})),app.whenReady().then((()=>{mainWindow=new BrowserWindow({width:1920,height:1080,icon:path.join(__dirname,"assets","icons","icon.icns"),webPreferences:{nodeIntegration:!0,contextIsolation:!1,nodeIntegrationInWorker:!0,experimentalFeatures:!0,backgroundThrottling:!1,webviewTag:!0,enableRemoteModule:!0}}),app.commandLine.appendSwitch("js-flags","--expose_gc --max-old-space-size=128"),mainWindow.webContents.setFrameRate(60),remoteMain.enable(mainWindow.webContents),mainWindow.loadFile("index.html"),autoUpdater.checkForUpdatesAndNotify(),autoUpdater.on("update-available",(()=>{console.log(lang.updater.updateAvailable),dialog.showMessageBox(mainWindow,{type:"info",buttons:[],title:lang.appName,message:lang.updater.updateInProgress})})),autoUpdater.on("update-downloaded",(()=>{dialog.showMessageBox(mainWindow,{type:"question",buttons:[lang.menu.yes,lang.menu.no],defaultId:0,cancelId:1,title:lang.appName,message:lang.updater.updateDownloaded}).then((e=>{0===e.response&&autoUpdater.quitAndInstall()}))})),mainWindow.webContents.once("did-finish-load",(()=>{openAtStartupFile&&(mainWindow.webContents.send("open-filePath",openAtStartupFile),openAtStartupFile=null)}));const e=[..."darwin"===process.platform?[{label:lang.appName,submenu:[{role:"about",label:`À propos de ${lang.appName}`},{type:"separator"},{role:"services"},{type:"separator"},{role:"hide",label:"Masquer "+lang.appName},{role:"hideothers",label:"Masquer les autres"},{role:"unhide",label:"Afficher tout"},{type:"separator"},{role:"quit",label:lang.menu.quit}]}]:[],{label:lang.menu.file,submenu:[{label:lang.menu.new,accelerator:"CmdOrCtrl+N",click:()=>{mainWindow.webContents.send("new-file")}},{label:lang.menu.save,accelerator:"CmdOrCtrl+S",click:()=>{mainWindow.webContents.send("save-file")}},{label:lang.menu.saveAs,accelerator:"CmdOrCtrl+Shift+S",click:()=>{mainWindow.webContents.send("save-file-as")}},{label:lang.menu.open,accelerator:"CmdOrCtrl+O",click:()=>{mainWindow.webContents.send("open-file")}},{type:"separator"},{label:lang.menu.quit,role:"quit"}]},{label:lang.menu.tools,submenu:[{label:lang.menu.devTools,accelerator:"CmdOrCtrl+Alt+I",click:()=>{mainWindow.webContents.openDevTools()}}]},{label:lang.menu.window,submenu:[{label:lang.menu.pgm,click:()=>{!function(){if(a&&!a.isDestroyed())return a.show(),void a.focus();a=new BrowserWindow({title:"PGM",webPreferences:{nodeIntegration:!0,contextIsolation:!1,additionalArguments:["--sourceId=pgm"]}}),remoteMain.enable(a.webContents),a.loadFile("output.html"),mainWindow.webContents.send("output-instruction","pgm"),a.on("closed",(()=>{a=null}))}()}},{label:lang.menu.preview,click:()=>{!function(){if(t&&!t.isDestroyed())return t.show(),void t.focus();t=new BrowserWindow({title:"Preview",webPreferences:{nodeIntegration:!0,contextIsolation:!1,additionalArguments:["--sourceId=preview"]}}),remoteMain.enable(t.webContents),t.loadFile("output.html"),mainWindow.webContents.send("output-instruction","preview"),t.on("closed",(()=>{t=null}))}()}}]},{label:lang.menu.help,submenu:[{label:lang.menu.checkForUpdates,click:()=>{autoUpdater.checkForUpdatesAndNotify()}}]}],n=Menu.buildFromTemplate(e);Menu.setApplicationMenu(n);let a=null,t=null})),autoUpdater.on("error",(e=>{console.error("Erreur lors de la mise à jour : ",e)}));const streamWorkers=new Map;ipcMain.handle("get-desktop-sources",(async(e,n)=>await desktopCapturer.getSources(n))),ipcMain.handle("open-folder-dialog",(async()=>await dialog.showOpenDialog({properties:["openDirectory"]}))),ipcMain.handle("save-file-dialog",(async()=>await dialog.showSaveDialog({title:"Sauvegarder le fichier",defaultPath:"corecast-save.ccast",filters:[{name:"ccast",extensions:["ccast"]}]}))),ipcMain.handle("open-file-dialog",(async()=>await dialog.showOpenDialog({filters:[{name:"ccast",extensions:["ccast"]}]}))),ipcMain.on("change-audio-buffer",((e,n)=>{app.commandLine.appendSwitch("--audio-buffer-size",String(n)),console.log("buffer changed to "+n),app.relaunch(),app.exit()})),ipcMain.on("restart",(e=>{app.relaunch(),app.exit()})),ipcMain.on("start-streaming",((e,n)=>{mainWindow.webContents.send("stream_started",{value:!0,id:n.id});const a=path.join(__dirname,"worker/ffmpegWorker.js"),t=new Worker(a);streamWorkers.set(n.id,t),t.postMessage({action:"init",config:n.config,id:n.id}),t.on("message",(e=>{e.id===n.id&&("finished"===e.status?(mainWindow.webContents.send("stream_finished",{value:"finished",id:e.id}),streamWorkers.delete(e.id)):"error"===e.status?(mainWindow.webContents.send("stream_error",{value:e.error,id:e.id}),streamWorkers.delete(e.id)):"fps"===e.status?mainWindow.webContents.send("stream_fps",{value:e.fps,id:e.id}):"bitrate"===e.status?mainWindow.webContents.send("stream_bitrate",{value:e.bitrate,id:e.id}):"started"===e.status&&mainWindow.webContents.send("stream_started",{value:e.message,id:e.id}))}))})),ipcMain.on("reload",(e=>{app.relaunch(),app.exit()})),ipcMain.on("stream-data",((e,n)=>{const{id:a,data:t}=n,o=streamWorkers.get(a);o?o.postMessage({action:"start",inputStream:t,id:a}):console.log(`Aucun worker actif pour l'id ${a}`)})),ipcMain.on("stop-streaming",((e,n)=>{const{id:a}=n,t=streamWorkers.get(a);t&&setTimeout((()=>{t.postMessage({action:"stop",id:a})}),2e3)}));